# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RasterAligner
                                 A QGIS plugin
 Aligns multiple rasters
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-01-06
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Chris Kerklaan
        email                : chris.kerklaan@nelen-schuurmans.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.core import (
    QgsProject,
    Qgis,  
    QgsTask, 
    QgsApplication, 
    QgsMessageLog,
    QgsRasterLayer
    )
    
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog

# Initialize Qt resources from file resources.py
#from .resources import *
# Import the code for the dialog
from .raster_align_dialog import RasterAlignerDialog
import os.path


    

from .raster_align_scripts.raster_aligner import align, total_raster_stats
#from .ogr2qgis import as_qgis_memory_layer


# Globals
subject = "Raster Aligner"

class RasterAligner:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RasterAligner_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Raster Aligner')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('RasterAligner', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/raster_align/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Align Rasters'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&Raster Aligner'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def completed(self, exception, result=None):
        """This is called when doSomething is finished.
        Exception is not None if doSomething raises an exception.
        result is the return value of doSomething."""
        
        if exception is None:
            if result is None:
                self.iface.messageBar().pushMessage("Canceled by user", level=Qgis.Info, duration=5)
            else:
                self.iface.messageBar().pushMessage("raster written to {}".format(
                    result['output_file']
                    ), level=Qgis.Info, duration=5)
                self.iface.messageBar().pushMessage("Aligned rasters succesfully", level=Qgis.Info, duration=5)
             
        
        
                            # get selected layer
            output_fn = self.dlg.lineEdit.text()
            layers = QgsProject.instance().layerTreeRoot().children()
            raster_to_be_aligned_fn = layers[self.dlg.raster_to_be_aligned.currentIndex()].layer()
            raster_template_fn = layers[self.dlg.raster_template.currentIndex()].layer()
            
            qgslayer = QgsRasterLayer(result['output_file'], 'Freshly aligned raster')
            QgsProject.instance().addMapLayer(qgslayer)
            
            print(self.dlg.write_statistics.isChecked())
            if self.dlg.write_statistics.isChecked():
                task = QgsTask.fromFunction('Writing aligning stats',
                                        total_raster_stats, 
                                        template_fn=str(raster_template_fn.source()),
                                        raster_to_be_aligned_fn=str(raster_to_be_aligned_fn.source()),
                                        output_file=output_fn, 
                                        output_stat_file=output_fn.replace('.tif', '.json')
                                        )
    
                QgsApplication.taskManager().addTask(task)
                print('Performing raster alignment statistics')
        
            return 
                
        else:
            self.iface.messageBar().pushMessage("{ex}".format(ex=exception), level=Qgis.Critical, duration=5)
            raise exception
            
            
    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select  output file ", "", '*.tif'
            )
        self.dlg.lineEdit.setText(filename)

    def on_run(self):
                    # get selected layer
        output_fn = self.dlg.lineEdit.text()
        layers = QgsProject.instance().layerTreeRoot().children()
        raster_to_be_aligned_fn = layers[self.dlg.raster_to_be_aligned.currentIndex()].layer()
        raster_template_fn = layers[self.dlg.raster_template.currentIndex()].layer()
        
        
        fill_value = self.dlg.nodata_fill_value.text()
        if fill_value:
            self.iface.messageBar().pushMessage(
                "Using fill value {}".format(fill_value),
                level=Qgis.Info, duration=5)
            fill_value = float(fill_value)
        
        else:
            fill_value = None
            self.iface.messageBar().pushMessage(
                "Using automated fill value",
                level=Qgis.Info, duration=5)
            
        """ globals function if a workaround, for more complicated things, 
        please do  look at https://gis.stackexchange.com/questions/296175/issues-with-qgstask-and-task-manager
        
        """ 
            
        globals()['task1'] = QgsTask.fromFunction('Aligning rasters',
                                    align, 
                                    on_finished=self.completed,
                                    template_fn=str(raster_template_fn.source()),
                                    raster_to_be_aligned_fn=str(raster_to_be_aligned_fn.source()),
                                    output_file=output_fn, 
                                    nodata_align=self.dlg.align_nodata.isChecked(), 
                                    fill_value=fill_value)
        
        QgsApplication.taskManager().addTask(globals()['task1'] )
        print('Performing raster alignment')

        
    
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = RasterAlignerDialog()
            self.dlg.pushButton.clicked.connect(self.select_output_file)
            
        
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        layer_names = [layer.name() for layer in layers]
        self.dlg.raster_to_be_aligned.clear()        
        self.dlg.raster_to_be_aligned.addItems(layer_names)

        self.dlg.raster_template.clear()        
        self.dlg.raster_template.addItems(layer_names)

        #self.dlg.raster_template.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            self.on_run()
            
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            # self.iface.messageBar().pushMessage(
            #     "Success", "Output file written at " + filename,
            #     level=Qgis.Success, duration=3)
