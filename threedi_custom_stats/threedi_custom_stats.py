# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ThreeDiCustomStats
                                 A QGIS plugin
 This plugin calculates statistics of 3Di results. The user chooses the variable, aggregation method and spatiotemperal filtering.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-27
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Leendert van Wolfswinkel | Nelen en Schuurmans
        email                : leendert.vanwolfswinkel@nelen-schuurmans.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (
    Qgis,
    QgsApplication,
    QgsProject,
    QgsTask,
    QgsRasterLayer
)

from .threedi_result_aggregation import *
from .ogr2qgis import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .threedi_custom_stats_dialog import ThreeDiCustomStatsDialog
import os.path


# TODO: cfl strictness factors instelbaar maken
# TODO: berekening van max timestep ook op basis van volume vs. debiet
# TODO: opties af laten hangen van wat er in het model aanwezig is; is wel tricky ivm presets


class Aggregate3DiResults(QgsTask):

    def __init__(self,
                 description: str,
                 parent: ThreeDiCustomStatsDialog,
                 gridadmin: str,
                 results_3di: str,
                 demanded_aggregations: List,
                 bbox,
                 start_time: int,
                 end_time: int,
                 subsets,
                 interpolation_method,
                 resample_point_layer: bool,
                 resolution,
                 output_flowlines: bool,
                 output_cells: bool,
                 output_nodes: bool,
                 output_rasters: bool
                 ):
        super().__init__(description, QgsTask.CanCancel)
        self.exception = None
        self.parent = parent
        self.parent.setEnabled(False)
        self.grid_admin = gridadmin
        self.results_3di = results_3di
        self.demanded_aggregations = demanded_aggregations
        self.bbox = bbox
        self.start_time = start_time
        self.end_time = end_time
        self.subsets = subsets
        self.interpolation_method = interpolation_method
        self.resample_point_layer = resample_point_layer
        self.resolution = resolution
        self.output_flowlines = output_flowlines
        self.output_cells = output_cells
        self.output_nodes = output_nodes
        self.output_rasters = output_rasters

        self.parent.iface.messageBar().pushMessage("3Di Custom Statistics",
                                                   "Started aggregating 3Di results",
                                                   level=Qgis.Info,
                                                   duration=3
                                                   )
        self.parent.iface.mainWindow().repaint()  # to show the message before the task starts

    def run(self):
        try:
            self.ogr_ds, self.mem_rasts = aggregate_threedi_results(
                gridadmin=self.grid_admin,
                results_3di=self.results_3di,
                demanded_aggregations=self.demanded_aggregations,
                bbox=self.bbox,
                start_time=self.start_time,
                end_time=self.end_time,
                subsets=self.subsets,
                interpolation_method=self.interpolation_method,
                resample_point_layer=self.resample_point_layer,
                resolution=self.resolution,
                output_flowlines=self.output_flowlines,
                output_cells=self.output_cells,
                output_nodes=self.output_nodes,
                output_rasters=self.output_rasters
            )

            return True

        except Exception as e:
            self.exception = e

        return False

    def finished(self, result):
        if self.exception is not None:
            self.parent.setEnabled(True)
            self.parent.repaint()
            raise self.exception
        if result:
            # Add layers to layer tree
            # They are added in order so the raster is below the polygon is below the line is below the point layer

            # raster layer
            if len(self.mem_rasts) > 0:
                for rastname, rast in self.mem_rasts.items():
                    raster_output_dir = self.parent.mQgsFileWidgetRasterFolder.filePath()
                    raster_output_fn = os.path.join(raster_output_dir, rastname + '.tif')
                    drv = gdal.GetDriverByName('GTiff')
                    gdal_tif = drv.CreateCopy(utf8_path=raster_output_fn, src=rast)
                    gdal_tif = None
                    self.parent.iface.addRasterLayer(raster_output_fn,
                                                     "Aggregation results: raster {}".format(rastname))

            # cell layer
            ogr_lyr = self.ogr_ds.GetLayerByName('cell')
            if ogr_lyr is not None:
                if ogr_lyr.GetFeatureCount() > 0:
                    # polygon layer
                    qgs_lyr = as_qgis_memory_layer(ogr_lyr, 'Aggregation results: cells')
                    project = QgsProject.instance()
                    project.addMapLayer(qgs_lyr)
                    style = self.parent.comboBoxCellsStyleType.currentData()
                    style_kwargs = self.parent.get_styling_parameters(output_type=style.output_type)
                    style.apply(qgis_layer=qgs_lyr, style_kwargs=style_kwargs)

            # flowline layer
            ogr_lyr = self.ogr_ds.GetLayerByName('flowline')
            if ogr_lyr is not None:
                if ogr_lyr.GetFeatureCount() > 0:
                    qgs_lyr = as_qgis_memory_layer(ogr_lyr, 'Aggregation results: flowlines')
                    project = QgsProject.instance()
                    project.addMapLayer(qgs_lyr)
                    style = self.parent.comboBoxFlowlinesStyleType.currentData()
                    style_kwargs = self.parent.get_styling_parameters(output_type=style.output_type)
                    style.apply(qgis_layer=qgs_lyr, style_kwargs=style_kwargs)

            # node layer
            ogr_lyr = self.ogr_ds.GetLayerByName('node')
            if ogr_lyr is not None:
                if ogr_lyr.GetFeatureCount() > 0:
                    qgs_lyr = as_qgis_memory_layer(ogr_lyr, 'Aggregation results: nodes')
                    project = QgsProject.instance()
                    project.addMapLayer(qgs_lyr)
                    style = self.parent.comboBoxNodesStyleType.currentData()
                    style_kwargs = self.parent.get_styling_parameters(output_type=style.output_type)
                    style.apply(qgis_layer=qgs_lyr, style_kwargs=style_kwargs)

            # resampled point layer
            ogr_lyr = self.ogr_ds.GetLayerByName('node_resampled')
            if ogr_lyr is not None:
                if ogr_lyr.GetFeatureCount() > 0:
                    qgs_lyr = as_qgis_memory_layer(ogr_lyr, 'Aggregation results: resampled nodes')
                    project = QgsProject.instance()
                    project.addMapLayer(qgs_lyr)
                    style = self.parent.comboBoxNodesStyleType.currentData()
                    style_kwargs = self.parent.get_styling_parameters(output_type=style.output_type)
                    style.apply(qgis_layer=qgs_lyr, style_kwargs=style_kwargs)

            self.parent.setEnabled(True)
            self.parent.iface.messageBar().pushMessage("3Di Custom Statistics",
                                                       "Finished custom aggregation",
                                                       level=Qgis.Success,
                                                       duration=3
                                                       )

        else:
            self.parent.setEnabled(True)
            self.parent.iface.messageBar().pushMessage("3Di Custom Statistics",
                                                       "Aggregating 3Di results returned no results",
                                                       level=Qgis.Warning,
                                                       duration=3
                                                       )

    def cancel(self):
        self.parent.iface.messageBar().pushMessage("3Di Custom Statistics",
                                                   "Pre-processing simulation results cancelled by user",
                                                   level=Qgis.Info,
                                                   duration=3
                                                   )
        super().cancel()


class ThreeDiCustomStats:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ThreeDiCustomStats_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&3Di Custom Statistics')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.tm = QgsApplication.taskManager()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ThreeDiCustomStats', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/threedi_custom_stats/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'3Di Custom Statistics'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&3Di Custom Statistics'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = ThreeDiCustomStatsDialog(self.iface)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # 3Di results
            results_3di = self.dlg.QgsFileWidget3DiResults.filePath()
            grid_admin = self.dlg.QgsFileWidgetGridAdmin.filePath()

            # Filtering parameters
            start_time = self.dlg.doubleSpinBoxStartTime.value()
            end_time = self.dlg.doubleSpinBoxEndTime.value()
            bbox_qgs_rectangle = self.dlg.mExtentGroupBox.outputExtent()  # bbox is now a https://qgis.org/pyqgis/master/core/QgsRectangle.html#qgis.core.QgsRectangle

            bbox = None
            if bbox_qgs_rectangle is not None:
                if not bbox_qgs_rectangle.isEmpty():
                    bbox = [bbox_qgs_rectangle.xMinimum(),
                            bbox_qgs_rectangle.yMinimum(),
                            bbox_qgs_rectangle.xMaximum(),
                            bbox_qgs_rectangle.yMaximum()]
            subsets = []
            if self.dlg.checkBox1D2DConnections.isChecked():
                subsets.append('1D2D')
            if self.dlg.checkBoxAll1D.isChecked():
                subsets.append('All1D')
            if self.dlg.checkBoxAll2D.isChecked():
                subsets.append('All2D')
            if self.dlg.checkBoxAllSewerage.isChecked():
                subsets.append('AllSewerage')
            if self.dlg.checkBoxCulverts.isChecked():
                subsets.append('Culverts')
            if self.dlg.checkBoxOrifices.isChecked():
                subsets.append('Orifices')
            if self.dlg.checkBoxPipes.isChecked():
                subsets.append('Pipes')
            if self.dlg.checkBoxWeirs.isChecked():
                subsets.append('Weirs')

            # Resolution
            resolution = self.dlg.doubleSpinBoxResolution.value()

            # Outputs
            output_flowlines = self.dlg.groupBoxFlowlines.isChecked()
            output_nodes = self.dlg.groupBoxNodes.isChecked()
            output_cells = self.dlg.groupBoxCells.isChecked()
            output_rasters = self.dlg.groupBoxRasters.isChecked()

            # Resample point layer
            resample_point_layer = self.dlg.checkBoxResample.isChecked()
            if resample_point_layer:
                interpolation_method = 'linear'
            else:
                interpolation_method = None

            aggregate_threedi_results_task = Aggregate3DiResults(
                description='Aggregate 3Di Results',
                parent=self.dlg,
                gridadmin=grid_admin,
                results_3di=results_3di,
                demanded_aggregations=self.dlg.demanded_aggregations,
                bbox=bbox,
                start_time=start_time,
                end_time=end_time,
                subsets=subsets,
                interpolation_method=interpolation_method,
                resample_point_layer=resample_point_layer,
                resolution=resolution,
                output_flowlines=output_flowlines,
                output_cells=output_cells,
                output_nodes=output_nodes,
                output_rasters=output_rasters
            )
            self.tm.addTask(aggregate_threedi_results_task)
