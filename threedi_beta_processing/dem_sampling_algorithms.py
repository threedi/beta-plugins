# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CrestLevelSampler
                                 A QGIS plugin
 Derive obstacle crest level from DEM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-25
        copyright            : (C) 2021 by Nelen & Schuurmans
        email                : leendert.vanwolfswinkel@nelen-schuurmans.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Nelen & Schuurmans'
__date__ = '2021-10-25'
__copyright__ = '(C) 2021 by Nelen & Schuurmans'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
import ogr
import gdal

from qgis.PyQt.QtCore import (QCoreApplication, QVariant)
from qgis.core import (
    QgsCoordinateTransform,
    QgsExpression,
    QgsFeature,
    QgsFeatureRequest,
    QgsFeatureSink,
    QgsField,
    QgsFields,
    QgsGeometry,
    QgsMapLayer,
    QgsProcessing,
    QgsProcessingAlgorithm,
    QgsProcessingFeatureSource,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterNumber,
    QgsProcessingParameterRasterLayer,
    QgsProject,
    QgsRasterLayer,
    QgsVectorLayer
)
from .raster_tools.dem_sampler import AttributeProcessor

ogr.UseExceptions()
gdal.UseExceptions()


class DemSamplerQgsConnector:
    """"Interface between dem_sampler.py and the QGIS API"""
    def __init__(
            self,
            raster: QgsRasterLayer,
            source: QgsProcessingFeatureSource,
            target_fieldname: str,
            width: float,
            distance: float,
            overwrite: bool,
            inverse: bool = False,
            modify: bool = False,
            average: int = None
    ):
        self.target_fields = QgsFields(source.fields())
        if target_fieldname not in source.fields().names():
            self.overwrite = True  # field does not exists, so value has to be filled for all features
            target_field = QgsField(
                name=target_fieldname,
                type=QVariant.Double,
                len=16,
                prec=3
            )
            self.target_fields.append(target_field)
        self.target_field_idx = self.target_fields.indexFromName(target_fieldname)
        if overwrite:
            self.features = source.getFeatures()
        else:
            request = QgsFeatureRequest(QgsExpression(f'{target_fieldname} IS NULL'))
            self.features = source.getFeatures(request)

        dem_fn = raster.source()
        dem_ds = gdal.Open(dem_fn)
        self.processor = AttributeProcessor(
            raster=dem_ds,
            width=width,
            distance=distance,
            inverse=inverse,
            modify=modify,
            average=average
        )

        src_crs = source.sourceCrs()
        tgt_crs = raster.crs()
        self.coordinate_transform = QgsCoordinateTransform(src_crs, tgt_crs, QgsProject.instance())

    def result_features(self):
        for feature in self.features:
            input_qgs_geometry = QgsGeometry(feature.geometry())
            input_qgs_geometry.transform(self.coordinate_transform)
            input_qgs_geometry_simple = input_qgs_geometry.simplify(0.01)
            input_wkb_geometry = input_qgs_geometry_simple.asWkb()
            input_ogr_geometry = ogr.Geometry(wkb=input_wkb_geometry)

            processed_features = self.processor.process(source_geometry=input_ogr_geometry)
            for output_ogr_geometry, crest_level in processed_features:
                result_feature = QgsFeature()
                result_feature.setFields(self.target_fields)
                for idx, value in enumerate(feature.attributes()):
                    result_feature.setAttribute(idx, value)
                result_feature[self.target_field_idx] = float(crest_level)

                output_wkb_geometry = output_ogr_geometry.ExportToWkb()
                output_qgs_geometry = QgsGeometry()
                output_qgs_geometry.fromWkb(output_wkb_geometry)
                output_qgs_geometry.transform(self.coordinate_transform, QgsCoordinateTransform.ReverseTransform)
                result_feature.setGeometry(output_qgs_geometry)

                yield result_feature


class CrestLevelAlgorithm(QgsProcessingAlgorithm):
    """
    Estimate crest level from sampling the DEM perpendicular to the input lines
    """
    OUTPUT = 'OUTPUT'
    OBSTACLE_LINES = 'OBSTACLE_LINES'
    OVERWRITE_VALUES = 'OVERWRITE_VALUES'
    SEARCH_DISTANCE = 'SEARCH_DISTANCE'
    WIDTH = 'WIDTH'
    DEM = 'DEM'

    TARGET_FIELDNAME = 'crest_level'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.OBSTACLE_LINES,
                self.tr('Obstacle lines layer'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                self.OVERWRITE_VALUES,
                self.tr('Overwrite existing values')
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.DEM,
                self.tr('Digital Elevation Model')
            )
        )

        param = QgsProcessingParameterNumber(
                self.SEARCH_DISTANCE,
                self.tr('Search distance [m]'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=10.0,
                minValue=0.0
        )
        param.setMetadata({'widget_wrapper': {'decimals': 2}})
        param.toolTip = 'Search distance for finding crest height in the DEM perpendicular to input line'
        self.addParameter(param)

        param = QgsProcessingParameterNumber(
                self.WIDTH,
                self.tr('Minimum crest width [m]'),
                type=QgsProcessingParameterNumber.Double,
                optional=True,
                minValue=0.0
        )
        param.setMetadata({'widget_wrapper': {'decimals': 2}})
        self.addParameter(param)

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Crest level')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        source = self.parameterAsSource(parameters, self.OBSTACLE_LINES, context)
        qgs_raster_layer = self.parameterAsRasterLayer(parameters, self.DEM, context)

        dem_sampler = DemSamplerQgsConnector(
            raster=qgs_raster_layer,
            source=source,
            target_fieldname=self.TARGET_FIELDNAME,
            width=self.parameterAsDouble(parameters, self.WIDTH, context),
            distance=self.parameterAsDouble(parameters, self.SEARCH_DISTANCE, context),
            overwrite=self.parameterAsBoolean(parameters, self.OVERWRITE_VALUES, context)
        )

        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            dem_sampler.target_fields,
            source.wkbType(),
            source.sourceCrs()
        )

        total = 100.0 / source.featureCount() if source.featureCount() else 0

        for current, feature in enumerate(dem_sampler.result_features()):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        return {self.OUTPUT: dest_id}

    def supportInPlaceEdit(self, layer: QgsMapLayer):
        if isinstance(layer, QgsVectorLayer):
            if self.TARGET_FIELDNAME in layer.fields().names():
                return True
        return False

    def flags(self):
        return super().flags() | QgsProcessingAlgorithm.FlagSupportsInPlaceEdits

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Crest level for linear obstacle'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Digital Elevation Model'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CrestLevelAlgorithm()


class MaxBreachDepthAlgorithm(QgsProcessingAlgorithm):
    """
    Estimate crest level from sampling the DEM perpendicular to the input lines
    """
    OUTPUT = 'OUTPUT'
    OBSTACLE_LINES = 'OBSTACLE_LINES'
    OVERWRITE_VALUES = 'OVERWRITE_VALUES'
    SEARCH_DISTANCE = 'SEARCH_DISTANCE'
    WIDTH = 'WIDTH'
    DEM = 'DEM'

    TARGET_FIELDNAME = 'max_breach_depth'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.OBSTACLE_LINES,
                self.tr('Levee lines layer'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                self.OVERWRITE_VALUES,
                self.tr('Overwrite existing values')
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.DEM,
                self.tr('Digital Elevation Model')
            )
        )

        param = QgsProcessingParameterNumber(
                self.SEARCH_DISTANCE,
                self.tr('Search distance [m]'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=10.0,
                minValue=0.0
        )
        param.setMetadata({'widget_wrapper': {'decimals': 2}})
        param.toolTip = 'Search distance for finding minima in the DEM perpendicular to input line'
        self.addParameter(param)

        param = QgsProcessingParameterNumber(
                self.WIDTH,
                self.tr('Minimum depression width [m]'),
                type=QgsProcessingParameterNumber.Double,
                optional=True,
                minValue=0.0
        )
        param.setMetadata({'widget_wrapper': {'decimals': 2}})
        self.addParameter(param)

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Max breach depth')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        source = self.parameterAsSource(parameters, self.OBSTACLE_LINES, context)
        if 'crest_level' not in source.fields().names():
            raise ValueError('Layer does not contain crest_level field')
        crest_level_field_idx = source.fields().indexFromName('crest_level')

        qgs_raster_layer = self.parameterAsRasterLayer(parameters, self.DEM, context)

        dem_sampler = DemSamplerQgsConnector(
            raster=qgs_raster_layer,
            source=source,
            target_fieldname=self.TARGET_FIELDNAME,
            width=self.parameterAsDouble(parameters, self.WIDTH, context),
            distance=self.parameterAsDouble(parameters, self.SEARCH_DISTANCE, context),
            overwrite=self.parameterAsBoolean(parameters, self.OVERWRITE_VALUES, context),
            inverse=True
        )

        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            dem_sampler.target_fields,
            source.wkbType(),
            source.sourceCrs()
        )

        total = 100.0 / source.featureCount() if source.featureCount() else 0

        for current, feature in enumerate(dem_sampler.result_features()):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            crest_level = feature[crest_level_field_idx]
            depression_level = feature[dem_sampler.target_field_idx]
            feature[dem_sampler.target_field_idx] = crest_level - depression_level

            sink.addFeature(feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        return {self.OUTPUT: dest_id}

    def supportInPlaceEdit(self, layer: QgsMapLayer):
        if isinstance(layer, QgsVectorLayer):
            if self.TARGET_FIELDNAME in layer.fields().names():
                return True
        return False

    def flags(self):
        return super().flags() | QgsProcessingAlgorithm.FlagSupportsInPlaceEdits

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Max breach depth'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Digital Elevation Model'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return MaxBreachDepthAlgorithm()
