# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CrestLevelSampler
                                 A QGIS plugin
 Derive obstacle crest level from DEM
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-25
        copyright            : (C) 2021 by Nelen & Schuurmans
        email                : leendert.vanwolfswinkel@nelen-schuurmans.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Nelen & Schuurmans'
__date__ = '2021-10-25'
__copyright__ = '(C) 2021 by Nelen & Schuurmans'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'
import ogr
import gdal

from qgis.PyQt.QtCore import (QCoreApplication, QVariant)
from qgis.core import (
    QgsCoordinateTransform,
    QgsExpression,
    QgsFeature,
    QgsFeatureRequest,
    QgsFeatureSink,
    QgsField,
    QgsFields,
    QgsGeometry,
    QgsMapLayer,
    QgsProcessing,
    QgsProcessingAlgorithm,
    QgsProcessingParameterBoolean,
    QgsProcessingParameterFeatureSource,
    QgsProcessingParameterFeatureSink,
    QgsProcessingParameterNumber,
    QgsProcessingParameterRasterLayer,
    QgsProject,
    QgsVectorLayer
)
from .raster_tools.dem_sampler import AttributeProcessor

ogr.UseExceptions()
gdal.UseExceptions()


class CrestLevelSamplerAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    OBSTACLE_LINES = 'OBSTACLE_LINES'
    OVERWRITE_VALUES = 'OVERWRITE_VALUES'
    SEARCH_DISTANCE = 'SEARCH_DISTANCE'
    WIDTH = 'WIDTH'
    DEM = 'DEM'

    RESULT_FIELD_NAME = 'crest_level'

    RESULT_FIELD = QgsField(
        name=RESULT_FIELD_NAME,
        type=QVariant.Double,
        len=16,
        prec=3
    )

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.OBSTACLE_LINES,
                self.tr('Obstacle lines layer'),
                [QgsProcessing.TypeVectorAnyGeometry]
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
                self.OVERWRITE_VALUES,
                self.tr('Overwrite existing values')
            )
        )

        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.DEM,
                self.tr('Digital Elevation Model')
            )
        )

        param = QgsProcessingParameterNumber(
                self.SEARCH_DISTANCE,
                self.tr('Search distance [m]'),
                type=QgsProcessingParameterNumber.Double,
                defaultValue=10.0,
                minValue=0.0
        )
        param.setMetadata({'widget_wrapper': {'decimals': 2}})
        param.toolTip = 'Search distance for finding crest height in the DEM perpendicular to input line'
        self.addParameter(param)

        param = QgsProcessingParameterNumber(
                self.WIDTH,
                self.tr('Minimum crest width [m]'),
                type=QgsProcessingParameterNumber.Double,
                optional=True,
                minValue=0.0
        )
        param.setMetadata({'widget_wrapper': {'decimals': 2}})
        self.addParameter(param)

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        source = self.parameterAsSource(parameters, self.OBSTACLE_LINES, context)
        overwrite = self.parameterAsBoolean(parameters, self.OVERWRITE_VALUES, context)

        target_fields = QgsFields(source.fields())
        if self.RESULT_FIELD_NAME in source.fields().names():
            source_result_field_idx = source.fields().indexFromName(self.RESULT_FIELD_NAME)
        else:
            overwrite = True  # field does not exists, so value has to be filled for all features
            target_fields.append(self.RESULT_FIELD)
        target_result_field_idx = target_fields.indexFromName(self.RESULT_FIELD_NAME)

        (sink, dest_id) = self.parameterAsSink(
            parameters,
            self.OUTPUT,
            context,
            target_fields,
            source.wkbType(),
            source.sourceCrs()
        )

        total = 100.0 / source.featureCount() if source.featureCount() else 0

        if overwrite:
            features = source.getFeatures()
        else:
            request = QgsFeatureRequest(QgsExpression(f'{self.RESULT_FIELD_NAME} IS NULL'))
            features = source.getFeatures(request)

        qgs_raster_layer = self.parameterAsRasterLayer(parameters, self.DEM, context)
        dem_fn = qgs_raster_layer.source()
        dem_ds = gdal.Open(dem_fn)
        processor = AttributeProcessor(
            raster=dem_ds,
            width=self.parameterAsDouble(parameters, self.WIDTH, context),
            distance=self.parameterAsDouble(parameters, self.SEARCH_DISTANCE, context),
        )

        src_crs = source.sourceCrs()
        tgt_crs = qgs_raster_layer.crs()
        tr = QgsCoordinateTransform(src_crs, tgt_crs, QgsProject.instance())
        inverse_tr = QgsCoordinateTransform(tgt_crs, src_crs, QgsProject.instance())

        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            input_qgs_geometry = QgsGeometry(feature.geometry())
            input_qgs_geometry.transform(tr)
            input_wkb_geometry = input_qgs_geometry.asWkb()
            input_ogr_geometry = ogr.Geometry(wkb=input_wkb_geometry)

            processed_features = processor.process(source_geometry=input_ogr_geometry)
            for output_ogr_geometry, crest_level in processed_features:
                result_feature = QgsFeature()
                result_feature.setFields(target_fields)
                for idx, value in enumerate(feature.attributes()):
                    result_feature.setAttribute(idx, value)
                result_feature[target_result_field_idx] = float(crest_level)

                output_wkb_geometry = output_ogr_geometry.ExportToWkb()
                output_qgs_geometry = QgsGeometry()
                output_qgs_geometry.fromWkb(output_wkb_geometry)
                output_qgs_geometry.transform(inverse_tr)
                result_feature.setGeometry(output_qgs_geometry)

                sink.addFeature(result_feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        return {self.OUTPUT: dest_id}

    def supportInPlaceEdit(self, layer: QgsMapLayer):
        if isinstance(layer, QgsVectorLayer):
            if self.RESULT_FIELD_NAME in layer.fields().names():
                return True
        return False

    def flags(self):
        return super().flags() | QgsProcessingAlgorithm.FlagSupportsInPlaceEdits

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Obstacle crest level from DEM'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Digital Elevation Model'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CrestLevelSamplerAlgorithm()
