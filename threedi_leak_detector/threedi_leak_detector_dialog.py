# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ThreediLeakDetectorDialog
                                 A QGIS plugin
 Compare 3Di exchange level between 2D cells with estimated obstacle height
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-04-19
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Nelen & Schuurmans
        email                : leendert.vanwolfswinkel@nelen-schuurmans.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from .leak_detector import *


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'threedi_leak_detector_dialog_base.ui'))


class ThreediLeakDetectorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(ThreediLeakDetectorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.gr = ''

        self.QgsFileWidget3DiResults.fileChanged.connect(self.results_3di_selected)
        self.mMapLayerComboBox.layerChanged.connect(self.flowline_layer_changed)

        self.doubleSpinBoxPrecision.setValue(0.01)
        self.doubleSpinBoxPrecision.setMinimum(0.001)
        self.doubleSpinBoxPrecision.setMaximum(10)
        

    def update_gr(self):
        results_3di = self.QgsFileWidget3DiResults.filePath()
        gridadmin = self.QgsFileWidgetGridAdmin.filePath()
        if os.path.isfile(results_3di) and os.path.isfile(gridadmin):
            self.gr = GridH5ResultAdmin(gridadmin, results_3di)
        else:
            self.gr = None
            
    def validate(self):
        valid = True
        if not isinstance(self.gr, GridH5ResultAdmin):
            valid = False
        self.dialogButtonBoxOKCancel.button(QtWidgets.QDialogButtonBox.Ok).setEnabled(valid)

    def results_3di_selected(self):
        # set path to gridadmin.h5
        results_3di = self.QgsFileWidget3DiResults.filePath()
        if os.path.isfile(results_3di):
            results_3di_dir = os.path.dirname(results_3di)
            gridadmin = os.path.join(results_3di_dir, 'gridadmin.h5')
            if os.path.isfile(gridadmin):
                self.QgsFileWidgetGridAdmin.setFilePath(gridadmin)
                self.update_gr()
        self.validate()

    def flowline_layer_changed(self):
        fcount = self.mMapLayerComboBox.currentLayer().selectedFeatureCount()
        self.labelFeatureCount.setText(str(fcount))
        
        
        