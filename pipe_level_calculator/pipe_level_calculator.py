# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RioolOntwerp
                                 A QGIS plugin
 Bepaal BOB's van rioolstelsel op basis van netwerk
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Emile de Badts
        email                : emile.debadts@nelen-schuurmans.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .pipe_level_calculator_dialog import PipeLevelCalculatorDialog
import os.path
from .calculate_levels import bereken_bobs
from qgis.core import Qgis
from .ogr2qgis import *

from qgis.core import (
    QgsMessageLog,
    QgsGeometry,
    QgsVectorLayer
)

from qgis.gui import (
    QgsMessageBar,
)

from qgis.PyQt.QtWidgets import (
    QSizePolicy,
    QPushButton,
    QDialog,
    QGridLayout,
    QDialogButtonBox,
)

from qgis.core import (
  QgsProcessingContext,
  QgsTaskManager,
  QgsTask,
  QgsProcessingAlgRunnerTask,
  Qgis,
  QgsProcessingFeedback,
  QgsApplication,
  QgsMessageLog,
)

MESSAGE_CATEGORY = 'TaskFromFunction'

STYLE =  os.path.join(os.path.dirname(__file__), 'style.qml')


class PipeLevelCalculator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'RioolOntwerp_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&RioolOntwerp')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PipeLevelCalculator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/pipe_level_calculator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('Pipe Level Calculator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&PipeLevelCalculator'),
                action)
            self.iface.removeToolBarIcon(action)

    def completed(self, exception, result=None):
        """This is called when doSomething is finished.
        Exception is not None if doSomething raises an exception.
        result is the return value of doSomething."""
        
        if exception is None:
            if result is None:
                self.iface.messageBar().pushMessage("Canceled by user", level=Qgis.Info, duration=5)
            else:
                self.iface.messageBar().pushMessage("Calculated levels succesfully in {iteraties} iterations".format(iteraties=result['iteraties']), level=Qgis.Info, duration=5)

                network_ds = result['network_ds']
                
                ogr_lyr = network_ds.GetLayerByName('trace_df_bobs')
                if ogr_lyr is not None:
                    if ogr_lyr.GetFeatureCount() > 0:  
                        qgs_lyr = as_qgis_memory_layer(ogr_layer = ogr_lyr, base_name='Pipes With Levels')
                        project = QgsProject.instance()
                        project.addMapLayer(qgs_lyr)            
                        qgs_lyr.loadNamedStyle(STYLE) 
                
        else:
            self.iface.messageBar().pushMessage("{ex}".format(ex=exception), level=Qgis.Critical, duration=5)
            raise exception
            
    def stopped(self,task):
        self.iface.messageBar().pushMessage("Canceled by user", level=Qgis.Critical, duration=5)

   
    def on_run(self):
        verhang_first_distance = self.dlg.verhang_table[0][1]       
        verhang_largest_distance = self.dlg.verhang_table[-1][1]
        #verhang_gradient_check = all([row[2]>0 for row in self.dlg.verhang_table])
        if verhang_first_distance != 0:
            self.iface.messageBar().pushMessage("First distance in gradient table should be 0", level=Qgis.Warning, duration=5)
                    
        if self.dlg.trace_max_distance > verhang_largest_distance:
            self.iface.messageBar().pushMessage("Maximum distance in gradient table not sufficient, not all pipes have a gradient", level=Qgis.Warning, duration=5)
        
        elif self.dlg.dekking == 0:
            self.iface.messageBar().pushMessage("Minimum cover should be larger than 0", level=Qgis.Warning, duration=5)

        else:        

            task = QgsTask.fromFunction('Calculate Pipe Levels', bereken_bobs, on_finished=self.completed,
                                         trace_fn = self.dlg.trace_layer,
                                          dem_fn = self.dlg.raster_layer,
                                          minimale_dekking = self.dlg.dekking,
                                          maximale_valhoogte = self.dlg.valhoogte,
                                          verhang_tabel = self.dlg.verhang_table,
                                          egalisatie = self.dlg.egalisatie,
                                          egalisatiehoek = self.dlg.egalisatie_hoek)

            QgsApplication.taskManager().addTask(task)
                    

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = PipeLevelCalculatorDialog()
            self.dlg.pushButtonRun.clicked.connect(self.on_run)

        # show the dialog
        self.dlg.show()
             