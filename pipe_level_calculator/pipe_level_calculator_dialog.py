# -*- coding: utf-8 -*-
"""
/***************************************************************************
 RioolOntwerpDialog
                                 A QGIS plugin
 Bepaal BOB's van rioolstelsel op basis van netwerk
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-05-14
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Emile de Badts
        email                : emile.debadts@nelen-schuurmans.nl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

##TODO check of de trace layer een kolom met id bevat
#TODO check of het trace geen multipolygonen bevat
## TODO initiele waarde van trace shape

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import Qgis
from qgis.utils import iface

from qgis.core import QgsVectorLayer
from qgis.core import QgsLayerTreeGroup
from qgis.core import QgsRasterLayer

from math import sqrt

from qgis.core import QgsProject

from qgis.PyQt.QtCore import QPersistentModelIndex


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'pipe_level_calculator_dialog_base.ui'))


class PipeLevelCalculatorDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(PipeLevelCalculatorDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.iface = iface
        self.setupUi(self)
        
        self.verhang_table = []        
        self.shp_layers = self.get_shp_layers(layers = QgsProject.instance().layerTreeRoot())
        self.raster_layers = self.get_raster_layers(layers = QgsProject.instance().layerTreeRoot())

        self.shp_layer_names = list(self.shp_layers.keys())
        self.raster_layer_names = list(self.raster_layers.keys())

        self.comboBoxTrace.clear()
        self.comboBoxTrace.addItems(self.shp_layer_names)
        self.comboBoxTrace.currentTextChanged.connect(self.trace_changed)
        
        self.comboBoxDEM.clear()
        self.comboBoxDEM.addItems(self.raster_layer_names)
        self.comboBoxDEM.currentTextChanged.connect(self.dem_changed)
        
        self.pushButtonRun.setEnabled(False)
        
        self.doubleSpinBoxDekking.setSingleStep(0.1)
        self.doubleSpinBoxValhoogte.setSingleStep(0.1)
        
        self.pushButtonAddRow.clicked.connect(self.add_row)
        self.pushButtonRemoveRow.clicked.connect(self.remove_row)
                
        self.doubleSpinBoxDekking.valueChanged.connect(self.dekking_change)
        self.doubleSpinBoxValhoogte.valueChanged.connect(self.valhoogte_change)
        self.doubleSpinBoxValhoogte.setValue(10)

        self.doubleSpinBoxEgalisatieHoek.setEnabled(False)
        self.doubleSpinBoxEgalisatieHoek.setMaximum(180)
        self.doubleSpinBoxEgalisatieHoek.setSuffix(u'\N{DEGREE SIGN}')
        self.doubleSpinBoxEgalisatieHoek.setSingleStep(1)
        self.checkBoxEgalisatie.stateChanged.connect(self.checkbox_egalisatie_change)
        self.doubleSpinBoxEgalisatieHoek.valueChanged.connect(self.egalisatie_change)

        self.trace_changed()
        self.dem_changed()
        self.dekking_change()
        self.valhoogte_change()
        self.checkbox_egalisatie_change()
        self.egalisatie_change()
        self.validate_run()
    
    
    def add_row(self):
        """Add a new row to verhang table"""
        self.tableWidgetVerhang.insertRow(self.tableWidgetVerhang.rowCount())
        current_row = self.tableWidgetVerhang.rowCount() - 1

        # from column
        from_spinbox= QtWidgets.QDoubleSpinBox()
        from_spinbox.setMaximum(10000)
        from_spinbox.setSingleStep(50)
        from_spinbox.valueChanged.connect(self.from_spinbox_value_changed)
        self.tableWidgetVerhang.setCellWidget(current_row, 0, from_spinbox)
        
        # to column
        to_spinbox= QtWidgets.QDoubleSpinBox()
        to_spinbox.setMaximum(100000)
        to_spinbox.setSingleStep(50)
        to_spinbox.valueChanged.connect(self.to_spinbox_value_changed)
        self.tableWidgetVerhang.setCellWidget(current_row, 1, to_spinbox)

        # verhang column
        verhang_spinbox= QtWidgets.QDoubleSpinBox()
        verhang_spinbox.setMaximum(1)
        verhang_spinbox.setDecimals(4)
        verhang_spinbox.setSingleStep(0.001)
        verhang_spinbox.valueChanged.connect(self.verhang_spinbox_value_changed)
        self.tableWidgetVerhang.setCellWidget(current_row, 2, verhang_spinbox)

        self.update_verhang_table()
        self.validate_run()
        
    def remove_row(self):
        index_list = []
        for model_index in self.tableWidgetVerhang.selectionModel().selectedRows():
            index = QPersistentModelIndex(model_index)
            index_list.append(index)

        for index in index_list:
            self.tableWidgetVerhang.removeRow(index.row())
        
        self.validate_run()
            
    def update_verhang_table(self):
        self.verhang_table = []
        for row in range(self.tableWidgetVerhang.rowCount()):
            
            from_widget = self.tableWidgetVerhang.cellWidget(row, 0)
            from_value = from_widget.value()
            
            to_widget = self.tableWidgetVerhang.cellWidget(row, 1)
            to_value = to_widget.value()
            
            verhang_widget = self.tableWidgetVerhang.cellWidget(row, 2)
            verhang_value = verhang_widget.value()
                        
            self.verhang_table += [(from_value, to_value, verhang_value)]
            
    def get_raster_layers(self, layers):
        
        rasterLayerNames = {}
        
        for layer in layers.children():
            if isinstance(layer, QgsLayerTreeGroup):
                if len(layer.children())>0:
                    rasterLayerNames.update(self.get_raster_layers(layer))
            else:
                mapLayer = layer.layer()
                if isinstance(mapLayer, QgsRasterLayer):
                    mapLayerSource = mapLayer.source() 
                    if '.tif' in mapLayerSource:
                        rasterLayerNames.update({mapLayer.name(): mapLayerSource})
            
        return(rasterLayerNames)
    
    
    def get_shp_layers(self, layers):
        
        shapeLayerNames = {}
        
        for layer in layers.children():
            if isinstance(layer, QgsLayerTreeGroup):
                if len(layer.children())>0:
                    shapeLayerNames.update(self.get_shp_layers(layer))
            else:
                mapLayer = layer.layer()
                if isinstance(mapLayer, QgsVectorLayer):
                    mapLayerProvider = mapLayer.dataProvider().name()
                    if mapLayerProvider == 'ogr':
                        
                        mapLayerSource = mapLayer.source()
                        if mapLayerSource.endswith('.shp'):
                            pass
                        else:
                            mapLayerSource = mapLayerSource.split('|')[0]
                            
                        if 'shp' in mapLayerSource:
                            shapeLayerNames.update({mapLayer.name(): mapLayerSource})
            
        return(shapeLayerNames)
    
    def trace_changed(self):
        if len(self.shp_layers) > 0:
            trace_layer_name = str(self.comboBoxTrace.currentText())
            self.trace_layer_name = trace_layer_name
            self.trace_layer = self.shp_layers[trace_layer_name]
            TraceLayerExtentWKT = QgsProject.instance().mapLayersByName(trace_layer_name)[0].extent().asWktCoordinates()
            TraceLayerExtentCoordinates = [float(coordinate.replace(',','')) for coordinate in TraceLayerExtentWKT.split(' ')]
            TraceLayerDiagonalDistance =  sqrt((TraceLayerExtentCoordinates[2] - TraceLayerExtentCoordinates[0])**2 + (TraceLayerExtentCoordinates[3] - TraceLayerExtentCoordinates[1])**2)
            self.trace_max_distance = TraceLayerDiagonalDistance
        else:
            self.trace_layer = None
            
    def dem_changed(self):
        if len(self.raster_layers) > 0:
            raster_layer_name = str(self.comboBoxDEM.currentText())
            self.raster_layer = self.raster_layers[raster_layer_name]
        else:
            self.raster_layer = None
        
    def dekking_change(self):
        self.dekking = self.doubleSpinBoxDekking.value()

    def valhoogte_change(self):
        self.valhoogte = self.doubleSpinBoxValhoogte.value()
               
    def from_spinbox_value_changed(self):
        self.update_verhang_table()
        
    def to_spinbox_value_changed(self):
        self.update_verhang_table()
    
    def verhang_spinbox_value_changed(self):
        self.update_verhang_table()
    
    def checkbox_egalisatie_change(self):
        self.egalisatie = self.checkBoxEgalisatie.isChecked()
        if self.egalisatie:
            self.doubleSpinBoxEgalisatieHoek.setEnabled(True)
        else:
            self.doubleSpinBoxEgalisatieHoek.setEnabled(False)
            
    def egalisatie_change(self):
        self.egalisatie_hoek = self.doubleSpinBoxEgalisatieHoek.value()
        
    def validate_run(self):
        valid = True
        if not self.raster_layer:
            valid = False
        if not self.trace_layer:
            valid = False
        if not self.tableWidgetVerhang.rowCount() > 0:
            valid = False
        self.pushButtonRun.setEnabled(valid)
            